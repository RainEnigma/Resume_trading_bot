import go_back_to_main
from config import config


def get_data():
    forming_string = '*–í–∞–ª—é—Ç–∞   –°–≤–æ–±.   –ò—Å–ø–æ–ª—å–∑.   –í—Å–µ–≥–æ\n*'
    balance = config.kuna().fetch_balance()
    currency_list = ['USD', 'UAH', 'BTC', 'ETH', 'WAVES']

    for currency in currency_list:
        forming_string = f'{forming_string}\n' \
                         f'*{currency}*' \
                         f'       {round(balance.get(currency).get("free"),4)}' \
                         f'       {round(balance.get(currency).get("used"),4)}' \
                         f'       {round(balance.get(currency).get("total"),4)}'
    return forming_string


def kurse_waves(currency):
    forming_string = f'–ö—É—Ä—Å {currency} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n'
    forming_string = f'{forming_string}\n' \
                     f'—Å–µ–π—á–∞—Å   - {config.kuna().fetch_ticker("WAVES/UAH").get("last")}\n' \
                     f'–º–∞–∫—Å–∏–º—É–º - {config.kuna().fetch_ticker("WAVES/UAH").get("high")}\n' \
                     f'–º–∏–Ω–∏–º—É–º  - {config.kuna().fetch_ticker("WAVES/UAH").get("low")}\n\n' \
                     f'–°–µ–π—á–∞—Å –ø—Ä–æ–¥–∞—é—Ç  - {config.kuna().fetch_ticker("WAVES/UAH").get("ask")}\n' \
                     f'–°–µ–π—á–∞—Å –ø–æ–∫—É–ø–∞—é—Ç - {config.kuna().fetch_ticker("WAVES/UAH").get("bid")}'
    return forming_string


def what_sdelka(message, bot):
    if message.text == 'üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        go_back_to_main.go_back_to_main(message, '–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')
    else:
        bot.send_message(message.from_user.id,
                         sdelki(message.text),
                         parse_mode='markdown')
        go_back_to_main.go_back_to_main(message, '–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')


def sdelki(argum=1):
    try:
        argum = int(argum)
    except Exception:
        argum = 1
    forming_answer = []
    last_sdelka = len(config.kuna().fetch_my_trades('WAVES/UAH')) - argum
    id = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('id')
    curr = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('symbol')
    side = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('side')
    price = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('price')
    skolko = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('amount')
    costs = config.kuna().fetch_my_trades('WAVES/UAH')[last_sdelka].get('cost')
    forming_string = f'*{id}*\n\n' \
                     f'–≤–∞–ª—é—Ç–∞ - {curr}\n' \
                     f'–æ–ø–µ—Ä–∞—Ü–∏—è - {side}\n' \
                     f'—Å—Ç–æ–∏–º–æ—Å—Ç—å - {price}–≥—Ä–Ω.\n' \
                     f'—Å–∫–æ–ª—å–∫–æ - {skolko}waves\n' \
                     f'–≤ –≥—Ä–Ω - {costs}–≥—Ä–Ω.'

    forming_answer.append(forming_string)
    return forming_answer


def buy_currency(message, bot):
    if message.text == 'üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        go_back_to_main.go_back_to_main(message, '–º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')
    else:
        # –∫—É–ø–∏—Ç—å number –≤–µ–π–≤–æ–≤

        try:
            config.kuna().create_market_buy_order('WAVES/UAH', message.text)
            bot.send_message(message.from_user.id, f'–ú—ã –∫—É–ø–∏–ª–∏ {message.text} WAVES')
        except Exception as e:
            bot.send_message(message.from_user.id, f'–û–®–ò–ë–ö–ê!!!\n{e}')


def auto_buy_currency(bot, number):
    # –∫—É–ø–∏—Ç—å number –≤–µ–π–≤–æ–≤

    try:
        config.kuna().create_market_buy_order('WAVES/UAH', number)
        bot.send_message(config.list_admins[0], f'–ú—ã –∫—É–ø–∏–ª–∏ {number} WAVES')
    except Exception as e:
        bot.send_message(config.list_admins[0], f'–û–®–ò–ë–ö–ê!!!\n{e}')


def auto_sell_currency(bot, number):
    # –∫—É–ø–∏—Ç—å number –≤–µ–π–≤–æ–≤

    try:
        config.kuna().create_market_sell_order('WAVES/UAH', number)
        bot.send_message(config.list_admins[0], f'–ú—ã –ø—Ä–æ–¥–∞–ª–∏ {number} WAVES')
    except Exception as e:
        bot.send_message(config.list_admins[0], f'–û–®–ò–ë–ö–ê!!!\n{e}')


def sell_currency(message, bot):
    if message.text == 'üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        go_back_to_main.go_back_to_main(message, '–º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')
    else:
        # –ø—Ä–æ–¥–∞—Ç—å number –≤–µ–π–≤–æ–≤
        try:
            config.kuna().create_market_sell_order('WAVES/UAH', message.text)
            bot.send_message(message.from_user.id, f'–ú—ã –ø—Ä–æ–¥–∞–ª–∏ {message.text} WAVES')
        except Exception as e:
            bot.send_message(message.from_user.id, f'–û–®–ò–ë–ö–ê!!!\n{e}')
